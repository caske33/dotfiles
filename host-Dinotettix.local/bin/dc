#!/bin/bash

workspace=$HOME/Workspace
cache_dir=$HOME/.cache/dc
repositories_cache=$cache_dir/repositories
token_cache=$cache_dir/github_token
# Assumes ~/Workspace/<name>
repo_name=$(pwd | sed "s/$(echo $HOME | sed 's/\//\\\//g')\/Workspace\/\([^\/]*\).*/\1/")

function __dc_change_dir () {
  local name=$1

  if [[ -z $name ]]; then
    local result=$(ls $workspace | cat - $repositories_cache | sort | uniq | fzf)
    if [[ -z $result ]]; then
      return false
    fi

    __dc_change_dir $result
  elif [[ -d $workspace/$name ]]; then
    cd $workspace/$name
  else
    cd $workspace
    git clone git@github.com:datacamp-engineering/$name.git
    cd $name
  fi
}

function __dc_update () {
  if [[ ! -f $token_cache ]]; then
    echo "No token found for github. It should be at $token_cache"
    return false
  fi

  local page=0
  local token=$(cat $token_cache)

  mkdir -p $(dirname $repositories_cache)
  echo '' > $repositories_cache

  while true; do
    echo "Fetching page $page"

    local extra=$(https api.github.com/orgs/datacamp-engineering/repos\?page=$page Authorization:"token ${token}" --print b | jq -r '.[] | .name')
    if [[ -z "$extra" ]]; then
      break
    fi
    echo $extra >> $repositories_cache

    page=$((page + 1))
  done

  echo "Updated!"
}

function __dcs_show-env () {
  local keypath=$1

  # local staging_profile="arn:aws:iam::301258414863:role/datacamp-prod-readonly"
  # local prod_profile="arn:aws:iam::487088987264:role/datacamp-staging-readonly"

  if [[ -z $keypath ]]; then
    echo "You need to specify a keypath, e.g. use $0 show-env /datacamp-prod/imb"
    return false
  fi

  local AWS_PROFILE="$AWS_PROFILE"
  if [[ -z "$AWS_PROFILE" ]]; then
    if [[ $keypath == /datacamp-prod/* ]]; then
      AWS_PROFILE="datacamp-prod-readonly"
      if ! AWS_PROFILE="${AWS_PROFILE}" aws sts get-caller-identity > /dev/null 2>&1; then
        aws-login prod-readonly
      fi
    elif [[ $keypath == /datacamp-staging/* ]]; then
      AWS_PROFILE="datacamp-staging-readonly"
      if ! AWS_PROFILE="${AWS_PROFILE}" aws sts get-caller-identity > /dev/null 2>&1; then
        aws-login staging-readonly
      fi
    else
      echo "Did not match prod or staging"
      return false
    fi
  fi

  if [[ -z "$AWS_PROFILE" ]]; then
    echo "No profile selected"
    return false
  fi

  AWS_PROFILE="$AWS_PROFILE" aws ssm get-parameters-by-path --recursive --path $keypath --region us-east-1 | jq -r '.Parameters | map(if .Type == "SecureString" then .Value = "<encrypted>" else . end) | sort_by(.Name)[] | "\(.Name)=\(.Value)"' | sed "s/$(echo $keypath | sed 's/\//\\\//g')\///g"
}

function __dc_gh () {
  open https://github.com/datacamp-engineering/${repo_name}
}

function __dc_pr () {
  local branch=$(git rev-parse --abbrev-ref HEAD)
  open https://github.com/datacamp-engineering/${repo_name}/compare/${branch}\?expand=1
}

function __dc_ci () {
  local branch=$(git rev-parse --abbrev-ref HEAD)
  local branch_encoded=$(echo $branch | jq -Rr @uri)
  open "https://app.circleci.com/pipelines/github/datacamp-engineering/${repo_name}?branch=${branch_encoded}"
}

function __dc_all () {
  echo "all gh pr ci update show-env"
}

if [[ $(__dc_all | grep -w ${1:-"not found"}) ]]; then
  # Execute the arguments given
  "__dc_$@"
else
  __dc_change_dir $@
fi
