export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export GOPATH=$HOME/.bin/gopath

PATH=/usr/local/bin:$PATH
PATH=$PATH:$HOME/Library/Python/2.7/bin/
PATH="$HOME/.cargo/bin:$PATH"
PATH="$GOPATH/bin:$PATH"
PATH="$HOME/.opam/default/bin:$PATH"
PATH="$HOME/Library/Python/3.7/bin:$PATH"
PATH="$HOME/.bin:$PATH"
export PATH

export GPG_TTY=$(tty)

function load_npm_token() {
  if [ -f ~/.npmrc ]; then
    export NPM_TOKEN=$(cat ~/.npmrc | sed -e "s/.*_authToken=//")
  else
    echo 'No npm token found'
  fi
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/jens/.bin/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/jens/.bin/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/jens/.bin/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/jens/.bin/google-cloud-sdk/completion.zsh.inc'; fi

# Wasmer
export WASMER_DIR="/Users/jens/.wasmer"
[ -s "$WASMER_DIR/wasmer.sh" ] && source "$WASMER_DIR/wasmer.sh"

function dc () {
  local name=$1
  local workspace=$HOME/Workspace
  local repositories_cache=$HOME/.cache/dc-repo/repositories

  if [[ $name == "update" ]]; then
    update_dc_repos
  elif [[ $name == "show-env" ]]; then
    local keypath=$2
    local staging_profile="arn:aws:iam::301258414863:role/datacamp-prod-readonly"
    local prod_profile="arn:aws:iam::487088987264:role/datacamp-staging-readonly"

    if [[ -z $keypath ]]; then
      echo "You need to specify a path"
      return false
    fi

    if [[ -z "$AWS_PROFILE" ]]; then
      if [[ $keypath == /datacamp-prod/* ]]; then
        onelogin-aws-login --profile prod
        export AWS_PROFILE="prod"
      elif [[ $keypath == /datacamp-staging/* ]]; then
        onelogin-aws-login --profile staging
        export AWS_PROFILE="staging"
      else
        echo "Did not match prod or staging"
        return false
      fi
    fi

    if [[ -z "$AWS_PROFILE" ]]; then
      echo "No profile selected"
      return false
    fi

    aws ssm get-parameters-by-path --with-decryption --path $keypath | jq -r '.Parameters[] | "\(.Name)=\(.Value)"' | sed "s/$(echo $keypath | sed 's/\//\\\//g')\///g"
  elif [[ $name == "open" ]]; then
    local name=$(pwd | sed "s/$(echo $HOME | sed 's/\//\\\//g')\/Workspace\/\([^\/]*\).*/\1/")
    open https://github.com/datacamp-engineering/$name
  elif [[ $name == "pr" ]]; then
    local name=$(pwd | sed "s/$(echo $HOME | sed 's/\//\\\//g')\/Workspace\/\([^\/]*\).*/\1/")
    local branch=$(git rev-parse --abbrev-ref HEAD)
    open https://github.com/datacamp-engineering/$name/compare/${branch}\?expand=1
  elif [[ $name == "ci" ]]; then
    local name=$(pwd | sed "s/$(echo $HOME | sed 's/\//\\\//g')\/Workspace\/\([^\/]*\).*/\1/")
    local branch=$(git rev-parse --abbrev-ref HEAD)
    local branch_encoded=$(echo $branch | jq -Rr @uri)
    open "https://app.circleci.com/github/datacamp-engineering/${name}/pipelines?branch=${branch_encoded}"
  elif [[ -z $name ]]; then
    local result=$(ls $workspace | cat - $repositories_cache | sort | uniq | fzf)
    if [[ -z $result ]]; then
      return false
    fi

    dc $result
  elif [[ -d $workspace/$name ]]; then
    cd $workspace/$name
  else
    cd $workspace
    git clone git@github.com:datacamp-engineering/$name.git
    cd $name
  fi
}

function update_dc_repos () {
  if [[ ! -f $HOME/.github_token ]]; then
    echo "No ~/.github_token found"
    return false
  fi

  local page=0
  local token=$(cat $HOME/.github_token)

  local cache=$HOME/.cache/dc-repo/repositories

  mkdir -p $(dirname $cache)
  echo '' > $cache

  while true; do
    echo "Fetching page $page"

    local extra=$(https api.github.com/orgs/datacamp-engineering/repos\?page=$page Authorization:"token ${token}" --print b | jq -r '.[] | .name')
    if [[ -z "$extra" ]]; then
      break
    fi
    echo $extra >> $cache

    page=$((page + 1))
  done

  echo "Updated!"
  return true
}
