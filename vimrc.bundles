if &compatible
    set nocompatible
end
set t_Co=256

call plug#begin('~/.vim/bundle')

" ===========================
" ===   Git Integration   ===
" ===========================
" Add git commands
Plug 'tpope/vim-fugitive'
Plug 'idanarye/vim-merginal'

" Add git diff symbols in the gutter
Plug 'airblade/vim-gitgutter'

" ========================
" ===   Improved VIM   ===
" ========================
" Close brackets automatically
Plug 'Raimondi/delimitMate'

" Closes def automatically
Plug 'tpope/vim-endwise'

" Show indentation line
Plug 'Yggdroot/indentLine'
let g:indent_guides_enable_on_vim_startup = 1
let g:indentLine_char = '|'                      " OR 'ï¸™'
let g:indentLine_concealcursor = 'nc'            " Enabled in which modes?

" (Un)comment line
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1

" Easily handle quotes, ...
Plug 'tpope/vim-surround'

" Case-sensitive replace + conversion between cases (snake-case, ...)
Plug 'tpope/vim-abolish'

" Add extra [ commands
Plug 'tpope/vim-unimpaired'

" Allow repeating custom commands
Plug 'tpope/vim-repeat'

" Easily move to a certain spot in the file
Plug 'easymotion/vim-easymotion'

" Allow killing of buffers more easily
Plug 'qpkorr/vim-bufkill'
nnoremap <leader>x :BD<cr>

" ================
" ===   Repl   ===
" ================
" Plug 'ujihisa/repl.vim'
" " Dependencies:
" Plug 'Shougo/vimproc.vim', {'do' : 'make'}
" Plug 'Shougo/vimshell.vim'

" =====================
" ===   Utilities   ===
" =====================
" Generate uuid
Plug 'kburdett/vim-nuuid'

" See colors inline
Plug 'chrisbra/Colorizer'
let g:colorizer_auto_filetype='css,html'

" Copy line on github
Plug 'ruanyl/vim-gh-line'
let g:gh_open_command = 'fn() { echo "$@" | pbcopy; }; fn '
let g:gh_use_canonical = 1

" Time tracking (WakaTime)
Plug 'wakatime/vim-wakatime'

" EditorConfig
Plug 'editorconfig/editorconfig-vim'

" Add a :Scratch buffer
Plug 'vim-scripts/scratch.vim'

" ==========================
" ===   Autocompletion   ===
" ==========================
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
imap <c-space> <Plug>(asyncomplete_force_refresh)

" let g:asyncomplete_auto_completeopt=0
set completeopt=noselect,menu,menuone,preview,noinsert
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

Plug 'prabirshrestha/asyncomplete.vim'
let g:asyncomplete_remove_duplicates = 1

" Dependency
Plug 'prabirshrestha/async.vim'

" Plugin for omni completion
Plug 'entropitor/asyncomplete-omni.vim'
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
  \ 'name': 'omni',
  \ 'whitelist': ['*'],
  \ 'completor': function('asyncomplete#sources#omni#completor')
  \  }))

" Plugin for ultisnips
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
  \ 'name': 'ultisnips',
  \ 'priority': 10,
  \ 'whitelist': ['*'],
  \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
  \ }))

Plug 'neovim/nvim-lsp'
Plug 'donniewest/asyncomplete_neovim_lsp'
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#lsp#get_source_options({}))

" lua print(vim.inspect(vim.lsp.buf))
" completion, declaration, definition, formatting, hover, implementation, peek_definition, range_formatting, references, rename, signature_help, type_definition
nnoremap <silent> K          <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gd         <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> gr         <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> gD         <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> g0         <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW         <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <silent> <leader>lr <cmd>lua vim.lsp.buf.rename()<CR>
nnoremap <silent> <leader>lf <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> <leader>ls <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> <leader>lt <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> <leader>li <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <leader>lc <cmd>lua vim.lsp.buf.completion()<CR>
nnoremap <silent> <leader>la <cmd>lua vim.lsp.buf.code_action()<CR>
" force reload
nnoremap <silent> <leader>lq <cmd>lua vim.lsp.stop_client(vim.lsp.get_active_clients())<CR><cmd>edit<CR>
" Capabilities
nnoremap <silent> <leader>lx <cmd>lua print(vim.inspect(vim.lsp.buf))<CR>

" =============================
" ===   Checkers/Builders   ===
" =============================
Plug 'dense-analysis/ale'
let g:ale_sign_column_always = 1
let g:ale_sign_error = 'XX'
let g:ale_sign_warning = '??'
let g:ale_fix_on_save = 1
let g:ale_lint_delay = 750
let g:ale_fixers = {}
" See Languages section for the rest!

" ==================
" ===   Search   ===
" ==================
Plug 'mileszs/ack.vim'
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" ===========================
" ===   File Management   ===
" ===========================
" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files<CR>
" nnoremap <C-p> <ESC>:Files<CR>
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>, fzf#vim#with_preview(), <bang>0)

" CtrlP
Plug 'ctrlpvim/ctrlp.vim'
nnoremap <C-p> <ESC>:CtrlP<CR>
nnoremap <C-b> <ESC>:CtrlPBuffer<CR>
nnoremap <leader>fp <ESC>:CtrlP<CR>
nnoremap <leader>fb <ESC>:CtrlPBuffer<CR>
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]((\.(git|hg|svn))|node_modules|build|Build|target|dist)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
  \ }
let g:ctrlp_show_hidden = 1

" vim-clap
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }
" nnoremap <C-p> :Clap gfiles ++externalfilter=fzf +async<CR>
" " nnoremap <C-S-p> :Clap files +async<CR>
" nnoremap <C-f> :Clap grep ++externalfilter=fzf +async<CR>
" nnoremap <C-b> :Clap buffers ++externalfilter=fzf +async<CR>

" ==========================
" ===   Test Managment   ===
" ==========================
Plug 'janko-m/vim-test'
let test#strategy = "neovim"
" let test#strategy = "dispatch"
" let g:test#javascript#jest#options = '--reporters ~/.config/yarn/global/node_modules/jest-vim-reporter/index.js'

nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>

" Dependencies
Plug 'tpope/vim-dispatch'

" ==============================
" ===   Project Management   ===
" ==============================
" File Sidebar
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
nmap <F7> :NERDTreeToggle<CR>
let g:NERDTreeShowHidden=1
" Git Plugin for sidebar
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }

" Allow running file commands from vim
Plug 'tpope/vim-eunuch'

" Tags sidebar
Plug 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>

" bottombar
Plug 'vim-airline/vim-airline'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12
let g:airline_powerline_fonts=1
set laststatus=2 "Start drawing on start of session
let g:airline_enable_branch = 0
let g:airline#extensions#whitespace#enabled = 0
let g:airline_section_b = ''
let g:airline_section_y = ''
let g:airline_section_z = '%l:%c'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#right_sep = ' '
let g:airline#extensions#tabline#right_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" ===============================
" ===   Local Configuration   ===
" ===============================
" Project config
Plug 'tpope/vim-projectionist'
let g:projectionist_heuristics = {
      \   "package.json": {
      \     "*.ts":  {"alternate": ["{}.spec.ts", "{}.spec.tsx", "{dirname}/__mocks__/{basename}.ts", "{dirname}/../{basename}.ts"]},
      \     "*.tsx": {"alternate": ["{}.spec.tsx"]},
      \     "*.spec.ts": {"alternate": ["{}.ts"]},
      \     "*.spec.tsx": {"alternate": ["{}.ts", "{}.tsx"]},
      \     "*.js":  {"alternate": ["{}.spec.js", "{}.spec.jsx"]},
      \     "*.jsx": {"alternate": ["{}.spec.jsx"]},
      \     "*.spec.js": {"alternate": ["{}.js"]},
      \     "*.spec.jsx": {"alternate": ["{}.js", "{}.jsx"]}
      \   }
      \ }

" Allow adding a local vimrc file to a project
Plug 'embear/vim-localvimrc'

" ==================
" ===   Themes   ===
" ==================
" Colorscheme is selected in vimrc itself as it doesn't work when set here

" Make gvim-only colorschemes work transparently in terminal vim
Plug 'godlygeek/csapprox'
set t_Co=256

" One dark scheme
Plug 'joshdick/onedark.vim'

" Base16 color schemes
Plug 'chriskempson/base16-vim'

" ====================
" ===   Snippets   ===
" ====================
Plug 'sirver/UltiSnips'
let g:UltiSnips={}
let g:UltiSnipsExpandTrigger = "<c-e>"
let g:UltiSnipsJumpForwardTrigger = "<c-l>"
let g:UltiSnipsJumpBackwardTrigger = "<c-h>"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsSnippetDirectories = ["~/.vim/bundle/snippets/UltiSnips/"]

" My snippets
Plug 'entropitor/snippets'

" =====================
" ===   Languages   ===
" =====================
" All the languages
Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled = ['javascript', 'markdown', 'yaml']

" -----------------
" ---   Antlr   ---
" -----------------
Plug 'jrozner/vim-antlr', {'for': ['antlr']}

" -------------------
" ---   C / C++   ---
" -------------------

" --------------
" ---   Go   ---
" --------------
" [Config for fatih/vim-go (through vim-polyglot)]:
let g:go_fmt_command = "goimports"

" -------------------
" ---   Graphql   ---
" -------------------
Plug 'jparise/vim-graphql', {'for': ['graphql']}

" ----------------
" ---   HTML   ---
" ----------------
let g:ale_fixers['html'] = ['prettier']

" ---------------
" ---   IDP   ---
" ---------------
au BufNewFile,BufRead *.idp set filetype=idp

Plug 'vim-scripts/idp.vim'

" ----------------
" ---   JSON   ---
" ----------------
let g:ale_fixers['json'] = ['prettier']

" JavaScript
let g:ale_fixers['javascript'] = ['prettier', 'eslint']
let g:ale_fixers['javascriptreact'] = ['prettier', 'eslint']
let g:ale_javascript_prettier_use_local_config = 1

" Javascript engine
Plug 'othree/yajs.vim', { 'for': 'javascript' }

" Fix import statements
Plug 'galooshi/vim-import-js', {'for': ['javascript', 'typescript', 'javascriptreact', 'typescriptreact' ]}
silent! nnoremap <silent> <leader>j :ImportJSWord<CR>
silent! nnoremap <silent> <leader>i :ImportJSFix<CR>

" --------------------
" ---   Markdown   ---
" --------------------
let g:ale_fixers['markdown'] = ['prettier']

" ------------------
" ---   Ledger   ---
" ------------------
let g:ledger_main="journal.ledger"
let g:ledger_bin="ledger"
Plug 'ledger/vim-ledger', {'for': ['ledger']}

" ---------------
" ---   Lua   ---
" ---------------

" ------------------
" ---   Prolog   ---
" ------------------
au BufNewFile,BufRead *.pro set filetype=prolog
au BufNewFile,BufRead *.pl set filetype=prolog

Plug 'mndrix/prolog.vim', {'for': ['prolog']}
let g:tagbar_type_prolog = {
    \ 'ctagstype' : 'Prolog',
    \ 'kinds' : [
      \ 'p:Predicates',
    \ ]
  \ }

" ------------------
" ---   Python   ---
" ------------------
let g:ale_fixers['python'] = ['autopep8']

" ------------------
" ---   Reason   ---
" ------------------
let g:ale_ocaml_ocamlformat_executable = "ocamlformat"
let g:ale_ocaml_ocamlformat_options = "--enable-outside-detected-project"
let g:ale_fixers['ocaml'] = ['ocamlformat']

" ----------------
" ---   Ruby   ---
" ----------------
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_ruby_rubocop_executable = 'bin/rubocop'

" Add rails support
Plug 'tpope/vim-rails', {'for': ['ruby']}

" Add support for rspec
" Plug 'thoughtbot/vim-rspec', {'for': ['ruby']}

" ----------------
" ---   Rust   ---
" ----------------
" [Config for rust-lang/rust.vim (added via polyglot)]:
let g:rustfmt_autosave = 1
let g:rustfmt_command = 'rustfmt'

" ---------------
" ---   SQL   ---
" ---------------
Plug 'tpope/vim-dadbod', {'for': ['sql']}

" ----------------------
" ---   Typescript   ---
" ----------------------
au BufNewFile,BufRead *.ts set filetype=typescript

let g:ale_fixers['typescript'] = ['prettier', 'eslint']
let g:ale_fixers['typescriptreact'] = ['prettier', 'eslint']
let g:ale_typescript_prettier_use_local_config = 1
let g:ale_linters_ignore = {'typescript': ['tslint'], 'typescriptreact': ['tslint']}

" ----------------
" ---   Yaml   ---
" ----------------
autocmd FileType yaml setlocal foldmethod=indent
Plug 'ingydotnet/yaml-vim', {'for': ['yaml']}
let g:ale_fixers['yaml'] = ['prettier']

call plug#end()

" ================================
" ===   LSP Config   ===
" ================================

lua << EOF
local nvim_lsp = require'nvim_lsp'
nvim_lsp.tsserver.setup{
  -- root_dir = nvim_lsp.util.root_pattern('tsconfig.json')
}

nvim_lsp.clangd.setup{}
nvim_lsp.bashls.setup{}
nvim_lsp.dockerls.setup{}
nvim_lsp.flow.setup{}
nvim_lsp.gopls.setup{}
nvim_lsp.hie.setup{}
nvim_lsp.ocamlls.setup{}
nvim_lsp.ocamllsp.setup{}
nvim_lsp.pyls_ms.setup{}
nvim_lsp.rls.setup{}
nvim_lsp.rust_analyzer.setup{}
nvim_lsp.solargraph.setup{}
nvim_lsp.terraformls.setup{}
nvim_lsp.vimls.setup{}
nvim_lsp.yamlls.setup{
  settings = {
    yaml = {
      schemas = {
        kubernetes = "*"
      }
    }
  }
}
require'nvim_lsp'.jsonls.setup{
  settings = {
    json = {
      schemas = {
        {
          description = 'TypeScript compiler configuration file',
          fileMatch = {'tsconfig.json', 'tsconfig.*.json'},
          url = 'http://json.schemastore.org/tsconfig'
        },
        {
          description = 'NPM package.json',
          fileMatch = {'package.json'},
          url = 'http://json.schemastore.org/package'
        },
        {
          description = 'Lerna config',
          fileMatch = {'lerna.json'},
          url = 'http://json.schemastore.org/lerna'
        },
        {
          description = 'Babel configuration',
          fileMatch = {'.babelrc.json', '.babelrc', 'babel.config.json'},
          url = 'http://json.schemastore.org/lerna'
        },
        {
          description = 'ESLint config',
          fileMatch = {'.eslintrc.json', '.eslintrc'},
          url = 'http://json.schemastore.org/eslintrc'
        },
        {
          description = 'Bucklescript config',
          fileMatch = {'bsconfig.json'},
          url = 'https://bucklescript.github.io/bucklescript/docson/build-schema.json'
        },
        {
          description = 'Prettier config',
          fileMatch = {'.prettierrc', '.prettierrc.json', 'prettier.config.json'},
          url = 'http://json.schemastore.org/prettierrc'
        }
      }
    }
  }
}
EOF

" This conflicts with Plug 'donniewest/asyncomplete_neovim_lsp'
" As we also have an asyncomplete omni completer which will cause double
" completions
" autocmd FileType * setlocal omnifunc=v:lua.vim.lsp.omnifunc
