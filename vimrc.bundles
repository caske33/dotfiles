if &compatible
    set nocompatible
end
set t_Co=256

call plug#begin('~/.vim/bundle')

" ===========================
" ===   Git Integration   ===
" ===========================
" Add git commands
Plug 'tpope/vim-fugitive'

" Add git diff symbols in the gutter
Plug 'airblade/vim-gitgutter'

" ========================
" ===   Improved VIM   ===
" ========================
" Close brackets automatically
Plug 'Raimondi/delimitMate'

" Closes def automatically
Plug 'tpope/vim-endwise'

" Show indentation line
Plug 'Yggdroot/indentLine'
let g:indent_guides_enable_on_vim_startup = 1
let g:indentLine_char = '|'                      " OR 'ï¸™'
let g:indentLine_concealcursor = 'nc'            " Enabled in which modes?

" (Un)comment line
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1

" Easily handle quotes, ...
Plug 'tpope/vim-surround'

" Case-sensitive replace + conversion between cases (snake-case, ...)
Plug 'tpope/vim-abolish'

" Add extra [ commands
Plug 'tpope/vim-unimpaired'

" Allow repeating custom commands
Plug 'tpope/vim-repeat'

" Easily move to a certain spot in the file
Plug 'easymotion/vim-easymotion'

" Allow killing of buffers more easily
Plug 'qpkorr/vim-bufkill'
nnoremap <leader>x :BD<cr>

" ================
" ===   Repl   ===
" ================
" Plug 'ujihisa/repl.vim'
" " Dependencies:
" Plug 'Shougo/vimproc.vim', {'do' : 'make'}
" Plug 'Shougo/vimshell.vim'

" =====================
" ===   Utilities   ===
" =====================
" Generate uuid
Plug 'kburdett/vim-nuuid'

" See colors inline
Plug 'chrisbra/Colorizer'
let g:colorizer_auto_filetype='css,html'

" Copy line on github
Plug 'ruanyl/vim-gh-line'
let g:gh_open_command = 'fn() { echo "$@" | pbcopy; }; fn '
let g:gh_use_canonical = 1

" Time tracking (WakaTime)
Plug 'wakatime/vim-wakatime'

" EditorConfig
Plug 'editorconfig/editorconfig-vim'

" Add a :Scratch buffer
Plug 'vim-scripts/scratch.vim'

" ==========================
" ===   Autocompletion   ===
" ==========================
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
imap <c-space> <Plug>(asyncomplete_force_refresh)

" let g:asyncomplete_auto_completeopt=0
set completeopt=noselect,menu,menuone,preview,noinsert
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

Plug 'prabirshrestha/asyncomplete.vim'
let g:asyncomplete_remove_duplicates = 1

" Dependency
Plug 'prabirshrestha/async.vim'

" Plugin for omni completion
Plug 'yami-beta/asyncomplete-omni.vim'
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
  \ 'name': 'omni',
  \ 'whitelist': ['*'],
  \ 'completor': function('asyncomplete#sources#omni#completor')
  \  }))

" Plugin for ultisnips
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
  \ 'name': 'ultisnips',
  \ 'priority': 10,
  \ 'whitelist': ['*'],
  \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
  \ }))

" Plugin for language server protocol (lsp)
Plug 'prabirshrestha/asyncomplete-lsp.vim'
" See Languages section for the config!

" Add Language Server Protocol
Plug 'prabirshrestha/vim-lsp'
let g:lsp_async_completion = 0
let g:lsp_preview_keep_focus = 1
let g:lsp_preview_float = 1
nnoremap <silent> K :LspHover<CR>
nnoremap <silent> F :LspCodeAction<CR>
nnoremap <silent> gd :LspDefinition<CR>
nnoremap <silent> <leader>lr :LspRename<CR>
nnoremap <silent> <leader>ld :LspDocumentSymbol<CR>
nnoremap <silent> <leader>lf :LspDocumentFormat<CR>
nnoremap <silent> <leader>le :LspDocumentDiagnostics<CR>

" =============================
" ===   Checkers/Builders   ===
" =============================
Plug 'w0rp/ale'
let g:ale_sign_column_always = 1
let g:ale_sign_error = 'XX'
let g:ale_sign_warning = '??'
let g:ale_fix_on_save = 1
let g:ale_lint_delay = 750
let g:ale_fixers = {}
" See Languages section for the rest!

" ==================
" ===   Search   ===
" ==================
Plug 'mileszs/ack.vim'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" ===========================
" ===   File Management   ===
" ===========================
" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
nnoremap <leader>b <ESC>:Buffers<CR>
nnoremap <leader>f <ESC>:Files<CR>
nnoremap <C-p> <ESC>:Files<CR>
" let g:fzf_buffers_jump = 1
" command! -bang -nargs=? -complete=dir Files
"   \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>, fzf#vim#with_preview(), <bang>0)

" CtrlP
" Plug 'ctrlpvim/ctrlp.vim'
" nnoremap <C-p> <ESC>:CtrlP<CR>
" nnoremap <C-S-p> <ESC>:CtrlPBuffer<CR>
" nnoremap <leader>fp <ESC>:CtrlP<CR>
" nnoremap <leader>fb <ESC>:CtrlPBuffer<CR>
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_custom_ignore = {
"   \ 'dir':  '\v[\/]((\.(git|hg|svn))|node_modules|build|Build|target)$',
"   \ 'file': '\v\.(exe|so|dll)$',
"   \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
"   \ }
" let g:ctrlp_show_hidden = 1

" ==========================
" ===   Test Managment   ===
" ==========================
Plug 'janko-m/vim-test'
let test#strategy = "dispatch"

" Fix vim-test
" https://github.com/janko/vim-test/issues/272#issuecomment-515749091
let g:root_markers = ['package.json', '.git/']
function! s:RunVimTest(cmd)
    " I guess this part could be replaced by projectionist#project_root
    for marker in g:root_markers
        let marker_file = findfile(marker, expand('%:p:h') . ';')
        if strlen(marker_file) > 0
            let g:test#project_root = fnamemodify(marker_file, ":p:h")
            break
        endif
        let marker_dir = finddir(marker, expand('%:p:h') . ';')
        if strlen(marker_dir) > 0
            let g:test#project_root = fnamemodify(marker_dir, ":p:h")
            break
        endif
    endfor

    execute a:cmd
endfunction

nnoremap <leader>tf :call <SID>RunVimTest('TestFile')<cr>
nnoremap <leader>tn :call <SID>RunVimTest('TestNearest')<cr>
nnoremap <leader>ts :call <SID>RunVimTest('TestSuite')<cr>
nnoremap <leader>tl :call <SID>RunVimTest('TestLast')<cr>
nnoremap <leader>tv :call <SID>RunVimTest('TestVisit')<cr>
" nmap <silent> <leader>tn :TestNearest<CR>
" nmap <silent> <leader>tf :TestFile<CR>
" nmap <silent> <leader>ts :TestSuite<CR>
" nmap <silent> <leader>tl :TestLast<CR>
" nmap <silent> <leader>tv :TestVisit<CR>
" au User BufEnter * let test#project_root=projectionist#path()

" Dependencies
Plug 'tpope/vim-dispatch'

" ==============================
" ===   Project Management   ===
" ==============================
" File Sidebar
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
nmap <F7> :NERDTreeToggle<CR>
let g:NERDTreeShowHidden=1
" Git Plugin for sidebar
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }

" Allow running file commands from vim
Plug 'tpope/vim-eunuch'

" Tags sidebar
Plug 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>

" bottombar
Plug 'vim-airline/vim-airline'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12
let g:airline_powerline_fonts=1
set laststatus=2 "Start drawing on start of session
let g:airline_enable_branch = 0
let g:airline#extensions#whitespace#enabled = 0
let g:airline_section_b = ''
let g:airline_section_y = ''
let g:airline_section_z = ''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#formatter = 'unique_tail'

" ===============================
" ===   Local Configuration   ===
" ===============================
" Project config
Plug 'tpope/vim-projectionist'

" Allow adding a local vimrc file to a project
Plug 'embear/vim-localvimrc'

" ==================
" ===   Themes   ===
" ==================
" Colorscheme is selected in vimrc itself as it doesn't work when set here

" Make gvim-only colorschemes work transparently in terminal vim
Plug 'godlygeek/csapprox'
set t_Co=256

" One dark scheme
Plug 'joshdick/onedark.vim'

" Base16 color schemes
Plug 'chriskempson/base16-vim'

" ====================
" ===   Snippets   ===
" ====================
Plug 'sirver/UltiSnips'
let g:UltiSnips={}
let g:UltiSnipsExpandTrigger = "<c-e>"
let g:UltiSnipsJumpForwardTrigger = "<c-l>"
let g:UltiSnipsJumpBackwardTrigger = "<c-h>"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsSnippetsDir = "~/.vim/bundle/snippets/UltiSnips"

" My snippets
Plug 'entropitor/snippets'

" =====================
" ===   Languages   ===
" =====================
" All the languages
Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled = ['javascript', 'markdown', 'yaml']

" -----------------
" ---   Antlr   ---
" -----------------
Plug 'jrozner/vim-antlr', {'for': ['antlr']}

" -------------------
" ---   C / C++   ---
" -------------------
if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

" --------------
" ---   Go   ---
" --------------
" if executable('go-langserver')
"     au User lsp_setup call lsp#register_server({
"         \ 'name': 'go-langserver',
"         \ 'cmd': {server_info->['go-langserver', '-mode', 'stdio']},
"         \ 'whitelist': ['go'],
"         \ })
"     autocmd FileType go setlocal omnifunc=lsp#complete
" endif
if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
    autocmd FileType go setlocal omnifunc=lsp#complete
endif

" [Config for fatih/vim-go (through vim-polyglot)]:
let g:go_fmt_command = "goimports"

" -------------------
" ---   Graphql   ---
" -------------------
Plug 'jparise/vim-graphql', {'for': ['graphql']}

" ----------------
" ---   HTML   ---
" ----------------
let g:ale_fixers['html'] = ['prettier']

" ---------------
" ---   IDP   ---
" ---------------
au BufNewFile,BufRead *.idp set filetype=idp

Plug 'vim-scripts/idp.vim'

" ----------------
" ---   JSON   ---
" ----------------
let g:ale_fixers['json'] = ['prettier']

" JavaScript
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_javascript_prettier_use_local_config = 1

if executable('flow-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'flow-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'flow-language-server --stdio --try-flow-bin']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), '.flowconfig'))},
        \ 'whitelist': ['javascript'],
        \ })
    autocmd FileType javascript setlocal omnifunc=lsp#complete
endif

" Javascript engine
Plug 'othree/yajs.vim', { 'for': 'javascript' }

" Fix import statements
Plug 'galooshi/vim-import-js', {'for': ['javascript', 'typescript']}

" --------------------
" ---   Markdown   ---
" --------------------
let g:ale_fixers['markdown'] = ['prettier']

" ------------------
" ---   Ledger   ---
" ------------------
Plug 'ledger/vim-ledger', {'for': ['ledger']}

" ------------------
" ---   Prolog   ---
" ------------------
au BufNewFile,BufRead *.pro set filetype=prolog
au BufNewFile,BufRead *.pl set filetype=prolog

Plug 'mndrix/prolog.vim', {'for': ['prolog']}
let g:tagbar_type_prolog = {
    \ 'ctagstype' : 'Prolog',
    \ 'kinds' : [
      \ 'p:Predicates',
    \ ]
  \ }

" ------------------
" ---   Python   ---
" ------------------
let g:ale_fixers['python'] = ['autopep8']

" ------------------
" ---   Reason   ---
" ------------------
if executable('ocaml-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'ocaml-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'ocaml-language-server --stdio']},
        \ 'whitelist': ['reason', 'ocaml'],
        \ })
    autocmd FileType reason setlocal omnifunc=lsp#complete
endif

" ----------------
" ---   Ruby   ---
" ----------------
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_ruby_rubocop_executable = 'bin/rubocop'

if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
    autocmd FileType ruby setlocal omnifunc=lsp#complete
endif

" Add rails support
Plug 'tpope/vim-rails', {'for': ['ruby']}

" Add support for rspec
" Plug 'thoughtbot/vim-rspec', {'for': ['ruby']}

" ----------------
" ---   Rust   ---
" ----------------
if executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rls']},
        \ 'whitelist': ['rust'],
        \ })
    autocmd FileType rust setlocal omnifunc=lsp#complete
endif

" [Config for rust-lang/rust.vim (added via polyglot)]:
let g:rustfmt_autosave = 1
let g:rustfmt_command = 'rustfmt'

" ---------------
" ---   SQL   ---
" ---------------
Plug 'tpope/vim-dadbod', {'for': ['sql']}

" ----------------------
" ---   Typescript   ---
" ----------------------
au BufNewFile,BufRead *.ts set filetype=typescript

let g:ale_fixers['typescript'] = ['prettier']
let g:ale_typescript_prettier_use_local_config = 1

autocmd FileType typescript let g:lsp_async_completion=0

if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript'],
        \ })
    autocmd FileType typescript setlocal omnifunc=lsp#complete
endif

" ----------------
" ---   Yaml   ---
" ----------------
autocmd FileType yaml setlocal foldmethod=indent
Plug 'ingydotnet/yaml-vim', {'for': ['yaml']}
let g:ale_fixers['yaml'] = ['prettier']


" ================================
" ===   Host Specific Config   ===
" ================================
" if filereadable(expand("~/.vimrc.bundles.local"))
"     source ~/.vimrc.bundles.local
" endif

call plug#end()
