if &compatible
    set nocompatible
end
set t_Co=256

call plug#begin('~/.vim/bundle')

" ======================================
" ===   Show keybindings when lost   ===
" ======================================
Plug 'liuchengxu/vim-which-key'
nnoremap <silent> <leader> :<c-u>WhichKey '<leader>'<CR>
nnoremap <silent> <leader>? :<c-u>WhichKey '<leader>'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<leader>'<CR>
set timeoutlen=500
let g:which_key_flatten=0
let g:which_key_default_group_name='which_key_ignore'
let g:which_key_map = {}
let g:which_key_map.d = { 'name': '+debug' }
let g:which_key_map.e = { 'name': '+edit' }
let g:which_key_map.f = { 'name': '+file' }
let g:which_key_map.g = { 'name': '+git' }
let g:which_key_map.l = { 'name': '+language' }
let g:which_key_map.n = { 'name': '+neovim' }
let g:which_key_map.s = { 'name': '+search' }
let g:which_key_map.t = { 'name': '+test' }
let g:which_key_map.w = { 'name': '+tabs' }

" ===========================
" ===   Git Integration   ===
" ===========================
" Add git commands
Plug 'tpope/vim-fugitive'
let g:which_key_map.g.s = 'git-status'
nmap <leader>gs <cmd>:Gstatus<CR>
let g:which_key_map.g.c = 'git-commit'
nmap <leader>gc <cmd>:Gcommit --verbose<CR>
Plug 'idanarye/vim-merginal'

" Add git diff symbols in the gutter
Plug 'airblade/vim-gitgutter'

Plug 'pwntester/octo.nvim'

" ========================
" ===   Improved VIM   ===
" ========================
" Close brackets automatically
Plug 'Raimondi/delimitMate'

" Closes def automatically
Plug 'tpope/vim-endwise'

" Show indentation line
Plug 'Yggdroot/indentLine'
let g:indent_guides_enable_on_vim_startup = 1
let g:indentLine_char = '|'                      " OR 'ï¸™'
let g:indentLine_concealcursor = 'nc'            " Enabled in which modes?

" (Un)comment line
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1

" Easily handle quotes, ...
Plug 'tpope/vim-surround'

" Case-sensitive replace + conversion between cases (snake-case, ...)
Plug 'tpope/vim-abolish'

" Add extra [ commands
Plug 'tpope/vim-unimpaired'

" Allow repeating custom commands
Plug 'tpope/vim-repeat'

" Easily move to a certain spot in the file
Plug 'easymotion/vim-easymotion'

" Allow killing of buffers more easily
Plug 'qpkorr/vim-bufkill'
nnoremap <leader>x :BD<cr>

Plug 'mbbill/undotree'

" ================
" ===   Repl   ===
" ================
" Plug 'ujihisa/repl.vim'
" " Dependencies:
" Plug 'Shougo/vimproc.vim', {'do' : 'make'}
" Plug 'Shougo/vimshell.vim'

" =====================
" ===   Utilities   ===
" =====================
" Generate uuid
Plug 'kburdett/vim-nuuid'

" See colors inline
Plug 'chrisbra/Colorizer'
let g:colorizer_auto_filetype='css,html'

" Copy line on github
Plug 'ruanyl/vim-gh-line'
let g:gh_open_command = 'fn() { echo "$@" | pbcopy; }; fn '
let g:gh_use_canonical = 1

" Screenshot from lines
Plug 'segeljakt/vim-silicon'

" Time tracking (WakaTime)
" Plug 'wakatime/vim-wakatime'

" EditorConfig
Plug 'editorconfig/editorconfig-vim'

" Add a :Scratch buffer
Plug 'vim-scripts/scratch.vim'

" ====================
" ===   Snippets   ===
" ====================
Plug 'sirver/UltiSnips'
let g:UltiSnips={}
let g:UltiSnipsExpandTrigger = "<c-e>"
let g:UltiSnipsJumpForwardTrigger = "<c-l>"
let g:UltiSnipsJumpBackwardTrigger = "<c-h>"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsSnippetDirectories = ["UltiSnips"]

" ==========================
" ===   Autocompletion   ===
" ==========================
" function! s:check_back_space() abort
"     let col = col('.') - 1
"     return !col || getline('.')[col - 1]  =~ '\s'
" endfunction
" inoremap <silent><expr> <TAB>
"   \ pumvisible() ? "\<C-n>" :
"   \ <SID>check_back_space() ? "\<TAB>" :
"   \ "\<Cmd>lua require'completion'.triggerCompletion()<CR>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

imap <tab> <Plug>(completion_smart_tab)
imap <s-tab> <Plug>(completion_smart_s_tab)

imap <silent> <c-space> <Plug>(completion_trigger)

set completeopt=menuone,noinsert,noselect,menu
set shortmess+=c
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

Plug 'ncm2/float-preview.nvim'

Plug 'neovim/nvim-lspconfig'
lua <<EOF
local function preview_location_callback(_, _, result)
  if result == nil or vim.tbl_isempty(result) then
    return nil
  end
  vim.lsp.util.preview_location(result[1])
end

function PeekDefinition()
  local params = vim.lsp.util.make_position_params()
  return vim.lsp.buf_request(0, 'textDocument/definition', params, preview_location_callback)
end
function PeekDeclaration()
  local params = vim.lsp.util.make_position_params()
  return vim.lsp.buf_request(0, 'textDocument/declaration', params, preview_location_callback)
end
function PeekImplementation()
  local params = vim.lsp.util.make_position_params()
  return vim.lsp.buf_request(0, 'textDocument/implementation', params, preview_location_callback)
end

vim.api.nvim_set_keymap('n', 'gD', '<cmd>lua PeekDeclaration()<CR>', {noremap=true, silent=true})
vim.api.nvim_set_keymap('n', 'gR', '<cmd>lua PeekDefinition()<CR>', {noremap=true, silent=true})
vim.api.nvim_set_keymap('n', 'gI', '<cmd>lua PeekImplementation()<CR>', {noremap=true, silent=true})
EOF

nnoremap <silent> K          <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gd         <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> gr         <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> gi         <cmd>lua vim.lsp.buf.implementation()<CR>
" nnoremap <silent> g0         <cmd>lua vim.lsp.buf.document_symbol()<CR>
" nnoremap <silent> gW         <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
let g:which_key_map.l.a = 'code-action'
" nnoremap <silent> <leader>la <cmd>lua vim.lsp.buf.code_action()<CR>
nnoremap <silent> <leader>la <cmd>lua require'entropitor.lsp.commands'.code_action()<CR>
vnoremap <silent> <leader>la :<C-U>lua vim.lsp.buf.range_code_action()<CR>
let g:which_key_map.l.A = 'all-code-actions'
nnoremap <silent> <leader>lA <cmd>lua require'entropitor.lsp.commands'.all_code_actions()<CR>
let g:which_key_map.l.d = 'document-symbol'
nnoremap <silent> <leader>ld <cmd>lua vim.lsp.buf.document_symbol()<CR>
let g:which_key_map.l.e = 'show-line-diagnostics'
nnoremap <silent> <leader>le <cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>
let g:which_key_map.l.E = 'fill-loclist'
nnoremap <silent> <leader>lE <cmd>lua vim.lsp.diagnostic.set_loclist()<CR>
let g:which_key_map.l.f = 'show-references'
nnoremap <silent> <leader>lf <cmd>lua vim.lsp.buf.references()<CR>
let g:which_key_map.l.g = 'workspace-symbol'
nnoremap <silent> <leader>lg <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
let g:which_key_map.l.h = 'highlight'
nnoremap <silent> <leader>lh <cmd>lua vim.lsp.buf.document_highlight()<CR>
let g:which_key_map.l.i = 'implementation'
nnoremap <silent> <leader>li <cmd>lua vim.lsp.buf.implementation()<CR>
let g:which_key_map.l.r = 'rename'
nnoremap <silent> <leader>lr <cmd>lua vim.lsp.buf.rename()<CR>
let g:which_key_map.l.p = 'format'
nnoremap <silent> <leader>lp <cmd>lua vim.lsp.buf.formatting()<CR>
vnoremap <silent> <leader>lp :<C-U>lua vim.lsp.buf.range_formatting()<CR>
let g:which_key_map.l.s = 'signature-help'
nnoremap <silent> <leader>ls <cmd>lua vim.lsp.buf.signature_help()<CR>
inoremap <silent> <leader>ls <cmd>lua vim.lsp.buf.signature_help()<CR>
let g:which_key_map.l.t = 'type-definition'
nnoremap <silent> <leader>lt <cmd>lua vim.lsp.buf.type_definition()<CR>
let g:which_key_map.l.q = 'force-reload'
nnoremap <silent> <leader>lq <cmd>lua vim.lsp.stop_client(vim.lsp.get_active_clients())<CR><cmd>edit<CR>
let g:which_key_map.l.w = { 'name': '+workspace' }
let g:which_key_map.l.w.a = 'add-folder'
nnoremap <silent> <leader>lwa <cmd>lua vim.lsp.buf.add_workspace_folder()<CR>
let g:which_key_map.l.w.l = 'list-folders'
nnoremap <silent> <leader>lwl <cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>
let g:which_key_map.l.w.r = 'remove-folder'
nnoremap <silent> <leader>lwr <cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>
let g:which_key_map.l.x = 'capabilities'
nnoremap <silent> <leader>lx <cmd>lua print(vim.inspect(vim.lsp.buf))<CR>

nmap ]a <Esc>]d<leader>la
nmap [a <Esc>[d<leader>la
nmap ]A <Esc>]D<leader>la
nmap [A <Esc>[D<leader>la

Plug 'RishabhRD/popfix', { 'do': 'make' }
Plug 'RishabhRD/nvim-lsputils'
lua <<EOF
vim.g.lsp_utils_location_opts = {
	height = 24,
	mode = 'editor',
}
vim.g.lsp_utils_symbols_opts = {
	height = 24,
	mode = 'editor',
	prompt = {},
}
EOF

Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

nnoremap [d <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
nnoremap ]d <cmd>lua vim.lsp.diagnostic.goto_next()<CR>
" First Diagnostic
nnoremap [D <cmd>lua vim.lsp.diagnostic.goto_next { cursor_position = {0,0} }<CR>
" Last Diagnostic
nnoremap ]D <cmd>lua vim.lsp.diagnostic.goto_prev { cursor_position = {0,0} }<CR>

Plug 'haorenW1025/completion-nvim'
autocmd! User completion-nvim autocmd BufEnter * lua require'completion'.on_attach()
let g:completion_enable_snippet = 'UltiSnips'
let g:completion_auto_change_source = 1
let g:completion_sorting = 'none'
let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
let g:completion_enable_auto_popup = 1

imap <c-j> <Plug>(completion_next_source)
imap <c-k> <Plug>(completion_prev_source)

let g:completion_chain_complete_list = {
    \ 'default' : {
    \   'default': [
    \       {'complete_items': ['lsp']},
    \       {'complete_items': ['snippet']},
    \       {'complete_items': ['buffers', 'path']},
    \       {'mode': '<c-p>'},
    \       {'mode': '<c-n>'}],
    \   'comment': [
    \       {'complete_items': ['buffers']}],
    \   'string': [
    \       {'complete_items': ['buffers']}]
    \   }
    \}

Plug 'steelsojka/completion-buffers'

Plug 'vigoux/completion-treesitter'
let g:complete_ts_highlight_at_point = 1

Plug 'pechorin/any-jump.vim'
let g:any_jump_disable_default_keybindings = 1
" Normal mode: Jump to definition under cursore
nnoremap <leader>aj :AnyJump<CR>
" Visual mode: jump to selected text in visual mode
xnoremap <leader>aj :AnyJumpVisual<CR>
" Normal mode: open last closed search window again
nnoremap <leader>al :AnyJumpLastResults<CR>

" =============================
" ===   Checkers/Builders   ===
" =============================
Plug 'dense-analysis/ale'
let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1
let g:ale_lint_delay = 750
let g:ale_fixers = {}
let g:ale_linters_ignore = {}
let g:ale_disable_lsp = 1
" See Languages section for the rest!

" ==================
" ===   Search   ===
" ==================
Plug 'mileszs/ack.vim'
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
nnoremap <leader>sr :Ack! 

" ===========================
" ===   File Management   ===
" ===========================
" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

let g:which_key_map.e.s = 'insert-snippet'
nnoremap <leader>es <cmd>Snippets<CR>

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
let g:which_key_map.f.b = 'buffers'
nnoremap <leader>fb :Telescope buffers<CR>
let g:which_key_map.f.f = 'files'
nnoremap <leader>ff :Telescope find_files<CR>
let g:which_key_map.f.g = 'git-files'
nnoremap <leader>fg :Telescope git_files<CR>
let g:which_key_map.f.c = 'edited-files'
nnoremap <leader>fc :Telescope git_status<CR>

let g:which_key_map.f.v = 'edit-vimrc'
nnoremap <leader>fv :e ~/.vimrc<CR>
let g:which_key_map.f.V = 'edit-vimrc.bundles'
nnoremap <leader>fV :e ~/.vimrc.bundles<CR>

let g:which_key_map.s.l = 'live-grep'
nnoremap <leader>sl :Telescope live_grep<CR>
let g:which_key_map.s.g = 'grep'
nnoremap <leader>sg :Rg<CR>

Plug 'nvim-telescope/telescope-github.nvim'

let g:which_key_map.e.g = 'insert-gist'
nnoremap <leader>eg <cmd>Telescope gh gist<CR>

let g:which_key_map.x = 'commands'
nnoremap <leader>x <cmd>Telescope commands<CR>

" ==========================
" ===   Test Managment   ===
" ==========================
Plug 'janko-m/vim-test'
let test#strategy = "neovim"
" let test#strategy = "dispatch"
" let g:test#javascript#jest#options = '--reporters ~/.config/yarn/global/node_modules/jest-vim-reporter/index.js'

let g:which_key_map.t.n= 'test-nearest'
nmap <silent> <leader>tn :TestNearest<CR>
let g:which_key_map.t.f= 'test-file'
nmap <silent> <leader>tf :TestFile<CR>
let g:which_key_map.t.s= 'test-suite'
nmap <silent> <leader>ts :TestSuite<CR>
let g:which_key_map.t.l= 'test-last'
nmap <silent> <leader>tl :TestLast<CR>
let g:which_key_map.t.v= 'test-visit'
nmap <silent> <leader>tv :TestVisit<CR>

let g:test#javascript#runner = 'jest'

" Dependencies
Plug 'tpope/vim-dispatch'

" ==============================
" ===   Project Management   ===
" ==============================
" File Sidebar
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
nmap <F7> :NERDTreeToggle<CR>
let g:which_key_map.f.t= 'file-tree'
nmap <leader>ft :NERDTreeToggle<CR>
let g:NERDTreeShowHidden=1
" Git Plugin for sidebar
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }

" Start screen
Plug 'mhinz/vim-startify'
let g:startify_change_to_dir = 0
let g:startify_update_oldfiles = 1
let g:which_key_map.f.s = 'start-screen'
nnoremap <leader>fs :Startify<ESC>

" Allow running file commands from vim
Plug 'tpope/vim-eunuch'

" Tags sidebar
Plug 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>

" bottombar
Plug 'vim-airline/vim-airline'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12
let g:airline_powerline_fonts=1
set laststatus=2 "Start drawing on start of session
let g:airline_enable_branch = 0
let g:airline#extensions#whitespace#enabled = 0
let g:airline_section_b = ''
let g:airline_section_y = ''
let g:airline_section_z = '%l:%c'

" Devicons for nerdtree, startify, ...
Plug 'ryanoasis/vim-devicons'
Plug 'kyazdani42/nvim-web-devicons'

Plug 'akinsho/nvim-bufferline.lua'

" =====================
" ===   Debugging   ===
" =====================
Plug 'mfussenegger/nvim-dap'
nnoremap <silent> <F5> :lua require'dap'.continue()<CR>
nnoremap <silent> <F10> :lua require'dap'.step_over()<CR>
nnoremap <silent> <F11> :lua require'dap'.step_into()<CR>
nnoremap <silent> <F12> :lua require'dap'.step_out()<CR>
" let g:which_key_map.d.a = 'attach'
" nnoremap <leader>da <cmd>lua require'dap'.attach('127.0.0.1', vim.fn.input('Port: '), require'dap'.configurations[vim.fn.input('Configuration')])<cr>
let g:which_key_map.d.b = 'toggle-breakpoint'
nnoremap <leader>db <cmd>lua require'dap'.toggle_breakpoint{}<cr>
let g:which_key_map.d.B = 'set-conditional-breakpoint'
nnoremap <silent> <leader>dB :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
let g:which_key_map.d.p = 'set-logpoint'
nnoremap <silent> <leader>dp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
let g:which_key_map.d.c = 'continue'
nnoremap <leader>dc <cmd>lua require'dap'.continue{}<cr>
let g:which_key_map.d.r = 'repl-open'
nnoremap <leader>dr <cmd>lua require'dap'.repl.open{}<cr>
let g:which_key_map.d.l = 'run-last'
nnoremap <leader>dl <cmd>lua require'dap'.run_last{}<cr>

" Adapters
Plug 'microsoft/vscode-node-debug2', { 'do': 'npm install && npm run-script build' }

" Requires treesitter
Plug 'theHamsta/nvim-dap-virtual-text'
let g:dap_virtual_text=v:true

Plug 'nvim-telescope/telescope-dap.nvim'
let g:which_key_map.d.l = { 'name': '+list' }
let g:which_key_map.d.l.b = 'list-breakpoints'
nmap <leader>dlb <cmd>lua require'telescope'.extensions.dap.list_breakpoints{}<cr>
let g:which_key_map.d.l.c = 'list-debug-configurations'
nmap <leader>dlc <cmd>lua require'telescope'.extensions.dap.configurations{}<cr>
let g:which_key_map.d.x = 'list-debug-commands'
nmap <leader>dx <cmd>lua require'telescope'.extensions.dap.commands{}<cr>
" =====================
" ===   Treesitter  ===
" =====================
Plug 'nvim-treesitter/nvim-treesitter' , {'do': ':TSUpdate'}

" ===============================
" ===   Local Configuration   ===
" ===============================
" Project config
Plug 'tpope/vim-projectionist'
let g:projectionist_heuristics = {
      \   "package.json": {
      \     "*.ts":  {"alternate": ["{}.spec.ts", "{}.spec.tsx", "{dirname}/__mocks__/{basename}.ts", "{dirname}/../{basename}.ts"]},
      \     "*.tsx": {"alternate": ["{}.spec.tsx"]},
      \     "*.spec.ts": {"alternate": ["{}.ts"]},
      \     "*.spec.tsx": {"alternate": ["{}.ts", "{}.tsx"]},
      \     "*.js":  {"alternate": ["{}.spec.js", "{}.spec.jsx"]},
      \     "*.jsx": {"alternate": ["{}.spec.jsx"]},
      \     "*.spec.js": {"alternate": ["{}.js"]},
      \     "*.spec.jsx": {"alternate": ["{}.js", "{}.jsx"]},
      \     "src/*.js":  {"alternate": ["test/{}.js", "spec/{}.js", "test/{}.jsx", "spec/{}.jsx"]},
      \     "test/*.js":  {"alternate": ["src/{}.js", "src/{}.jsx"]},
      \     "spec/*.js":  {"alternate": ["src/{}.js", "src/{}.jsx"]},
      \     "*_test.rego":  {"alternate": ["{}.rego"]},
      \     "*.rego":  {"alternate": ["{}_test.rego"]}
      \   }
      \ }

" Allow adding a local vimrc file to a project
Plug 'embear/vim-localvimrc'

" ==================
" ===   Themes   ===
" ==================
" Colorscheme is selected in vimrc itself as it doesn't work when set here

" Make gvim-only colorschemes work transparently in terminal vim
" Plug 'godlygeek/csapprox'
" set t_Co=256

" One dark scheme
Plug 'joshdick/onedark.vim'

" Base16 color schemes
Plug 'chriskempson/base16-vim'

" =====================
" ===   Languages   ===
" =====================
" All the languages
Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled = ['javascript', 'markdown', 'yaml']

" -----------------
" ---   Antlr   ---
" -----------------
Plug 'jrozner/vim-antlr', {'for': ['antlr']}

" -------------------
" ---   C / C++   ---
" -------------------

" --------------
" ---   F#   ---
" --------------
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'dev',
    \ 'for': 'fsharp',
    \ 'do': 'bash install.sh',
    \ }

" The 'for: fsharp' only works because vim-polyglot does some magic as well
Plug 'ionide/Ionide-vim', {
    \ 'for': 'fsharp',
    \ 'do':  'make fsautocomplete',
    \ }

let g:ale_fixers['fsharp'] = [
  \  { buffer -> {
  \     'command': 'fantomas %t',
  \     'read_temporary_file': 1,
  \     }
  \  }
  \]

" --------------
" ---   Go   ---
" --------------
" [Config for fatih/vim-go (through vim-polyglot)]:
let g:go_fmt_command = "goimports"

" -------------------
" ---   Graphql   ---
" -------------------
Plug 'jparise/vim-graphql', {'for': ['graphql']}

" -------------------
" ---   Haskell   ---
" -------------------
function! SetupLspHaskell ()
lua << EOF
local lspconfig = require'lspconfig'
local util = require'lspconfig/util'
local configs = require'lspconfig/configs'
if not configs.haskell then
  configs.haskell = {
    default_config = {
      cmd = {"haskell-language-server-wrapper", "--lsp"};
      filetypes = {"haskell"};
      root_dir = util.root_pattern("*.cabal", "stack.yaml", "cabal.project", "package.yaml", "hie.yaml", ".git");
    };
  }
end
EOF
endfunction

" ----------------
" ---   HTML   ---
" ----------------
let g:ale_fixers['html'] = ['prettier']

" ---------------
" ---   HCL   ---
" ---------------
let g:ale_fixers['terraform'] = ['terraform']

" ---------------
" ---   IDP   ---
" ---------------
au BufNewFile,BufRead *.idp set filetype=idp

Plug 'vim-scripts/idp.vim'

" ----------------
" ---   JSON   ---
" ----------------
let g:ale_fixers['json'] = ['prettier']

" JavaScript
let g:ale_fixers['javascript'] = ['prettier', 'eslint']
let g:ale_fixers['javascriptreact'] = ['prettier', 'eslint']
let g:ale_javascript_prettier_use_local_config = 1

let g:ale_linters_ignore['typescript'] = ['deno']
let g:ale_linters_ignore['typescriptreact'] = ['deno']

" Javascript engine
Plug 'othree/yajs.vim', { 'for': 'javascript' }

" --------------------
" ---   Markdown   ---
" --------------------
let g:ale_fixers['markdown'] = ['prettier']

Plug 'entropitor/jot-lsp', {
      \ 'do': 'cd server && yarn && yarn tsc'
      \}

" ------------------
" ---   Ledger   ---
" ------------------
let g:ledger_main = "journal.ledger"
let g:ledger_bin = "ledger"
let g:ledger_default_commodity = "â‚¬"
let g:ledger_commodity_sep = " "
let g:ledger_commodity_before = 1
let g:ledger_align_at = 76
let g:ledger_align_commodity = 1
let g:ledger_decimal_sep = "."
function! LedgerSetupBindings ()
lua <<EOF
  -- @c: Clear Expenses
  vim.api.nvim_buf_set_keymap(0, 'n', '@c', '0wvt r ', {})

  -- @a: Rewrite assignee
  vim.api.nvim_buf_set_keymap(0, 'n', '@a', '0f*f)wc$', {})
  -- @d: Assign to Datacamp
  vim.api.nvim_buf_set_keymap(0, 'n', '@d', '@cRL:R:D<Tab><Esc>', {})
  -- @e: Edit Expenses
  vim.api.nvim_buf_set_keymap(0, 'n', '@e', '0wf R', {})
  -- @f: Shared with Sara (FakeRent)
  vim.api.nvim_buf_set_keymap(0, 'n', '@f', '$A/2<Esc>vT g=yypvt r RL:S:Fa<Tab><Tab><Esc>', {})
  -- @g: Assign to Groceries
  vim.api.nvim_buf_set_keymap(0, 'n', '@g', '@cRExpenses:Food:Groceries<Esc>', {})
  -- @r: Assign to Resto
  vim.api.nvim_buf_set_keymap(0, 'n', '@r', '@cRExpenses:Food:Resto<Esc>', {})
  -- @s: Shared with Sara (Food)
  vim.api.nvim_buf_set_keymap(0, 'n', '@s', '$A/2<Esc>vT g=yypvt r RL:S:Fo<Tab><Tab><Esc>', {})
EOF
endfunction
augroup ledger-bindings
  autocmd!
  autocmd Filetype ledger inoremap <buffer> <silent> <Tab> <C-r>=ledger#autocomplete_and_align()<CR>
  autocmd Filetype ledger vnoremap <buffer> <silent> <Tab> :LedgerAlign<CR>
  autocmd Filetype ledger nnoremap <buffer> <silent> <leader>la :LedgerAlign<CR>
  autocmd Filetype ledger nnoremap <buffer> <silent> <leader>lb :Balance<CR>
  autocmd Filetype ledger nnoremap <buffer> <silent> <leader>lf :Reconcile
  autocmd Filetype ledger nnoremap <buffer> <silent> <leader>lr :Register
  autocmd Filetype ledger call LedgerSetupBindings()
augroup end

Plug 'arecarn/vim-selection'
Plug 'arecarn/vim-crunch'
let g:crunch_result_type_append=2

" ---------------
" ---   Lua   ---
" ---------------

" ------------------
" ---   Prolog   ---
" ------------------
au BufNewFile,BufRead *.pro set filetype=prolog
au BufNewFile,BufRead *.pl set filetype=prolog

Plug 'mndrix/prolog.vim', {'for': ['prolog']}
let g:tagbar_type_prolog = {
    \ 'ctagstype' : 'Prolog',
    \ 'kinds' : [
      \ 'p:Predicates',
    \ ]
  \ }

" ------------------
" ---   Python   ---
" ------------------
let g:ale_fixers['python'] = ['autopep8']

" ------------------
" ---   Reason   ---
" ------------------
let g:ale_ocaml_ocamlformat_executable = "ocamlformat"
let g:ale_ocaml_ocamlformat_options = "--enable-outside-detected-project"
let g:ale_fixers['ocaml'] = ['ocamlformat']

" ----------------
" ---   Rego   ---
" ----------------
let g:ale_fixers['rego'] = [
  \  { buffer -> {
  \     'command': 'opa fmt %t',
  \     }
  \  }
  \]

" ----------------
" ---   Ruby   ---
" ----------------
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_ruby_rubocop_executable = 'bin/rubocop'

" Add rails support
Plug 'tpope/vim-rails', {'for': ['ruby']}

" Add support for rspec
" Plug 'thoughtbot/vim-rspec', {'for': ['ruby']}

" ----------------
" ---   Rust   ---
" ----------------
" [Config for rust-lang/rust.vim (added via polyglot)]:
let g:rustfmt_autosave = 1
let g:rustfmt_command = 'rustfmt'

" ---------------
" ---   SQL   ---
" ---------------
Plug 'tpope/vim-dadbod', {'for': ['sql']}

" ----------------
" ---   TOML   ---
" ----------------

" ----------------------
" ---   Typescript   ---
" ----------------------
au BufNewFile,BufRead *.ts set filetype=typescript

command! FileRename call TypescriptFileRename()
function! TypescriptFileRename ()
lua << EOF
  local function ok_or_nil(status, ...)
    if not status then return end
    return ...
  end
  local function npcall(fn, ...)
    return ok_or_nil(pcall(fn, ...))
  end

  old_uri = vim.uri_from_bufnr(0)
  old_file = vim.fn.expand('%')
  new_file = npcall(vim.fn.input, "New Name: ", old_file)
  if not (new_file and #new_file > 0) then return end

  local handler = function(_, _, result, client_id)
    if not result then return end
    print('moving file itself')
    vim.api.nvim_command(":bdelete")
    vim.api.nvim_command(":!mv " .. old_file .. " " .. new_file)
    vim.api.nvim_command(":e " .. new_file)
    return {}
  end;

  vim.lsp.buf_request(0, 'workspace/executeCommand', {
    command='_typescript.applyRenameFile';
    arguments={{sourceUri=old_uri; targetUri=vim.uri_from_fname(new_file)}};
  }, handler)
EOF
endfunction

let g:ale_fixers['typescript'] = ['prettier', 'eslint']
let g:ale_fixers['typescriptreact'] = ['prettier', 'eslint']
let g:ale_typescript_prettier_use_local_config = 1
let g:ale_linters_ignore['typescript'] = ['tslint', 'deno']
let g:ale_linters_ignore['typescriptreact'] = ['tslint', 'deno']

Plug 'microsoft/vscode-eslint', {
    \ 'do': 'npm install && npm run webpack'
    \}
" Setup eslint-server
function! SetupLspEslint ()
lua << EOF
local lspconfig = require'lspconfig'
local util = require'lspconfig/util'
local configs = require'lspconfig/configs'
if not configs.eslint then
  configs.eslint = {
    default_config = {
      cmd = {"node", vim.env.HOME .. "/.vim/bundle/vscode-eslint/server/out/eslintServer.js", "--stdio"};
      filetypes = {"javascript", "javascriptreact", "javascript.jsx", "typescript", "typescriptreact", "typescript.tsx"};
      -- root_dir = util.root_pattern(".eslintrc.json", ".eslintrc.js", "package.json", "tsconfig.json", ".git");
      root_dir = util.root_pattern(".eslintrc.json", ".eslintrc.js");
      settings = {
        validate = "on";
        packageManager = "yarn";
        codeAction = {
          disableRuleComment = {
            enable = true;
            location = 'separateLine'
          };
          showDocumentation = {
            enable = true;
          };
        };
        codeActionOnSave = {
          enable = false;
          mode = 'all';
        };
        format = false;
        quiet = false;
        onIgnoredFiles = 'off';
        options = null;
        run = 'onType';
        nodePath = '/usr/local/bin/node';
        workspaceFolder = null;
      };
      handlers = {
        ['client/registerCapability'] = function(_, _, result, client_id)
          if not result then return end
          return {}
        end;
        ['eslint/noConfig'] = function(_, _, result, client_id)
          if not result then return end
          print('calling eslint/noConfig')
          return {}
        end;
        ['eslint/noLibrary'] = function(_, _, result, client_id)
          if not result then return end
          print('calling eslint/noLibrary')
          return {}
        end;
        ['eslint/openDoc'] = function(_, _, result, client_id)
          if not result then return end
          vim.cmd('!open ' .. result.url)
          return {}
        end;
        ['eslint/probeFailed'] = function(_, _, result, client_id)
          if not result then return end
          print('calling eslint/probeFailed')
          return {}
        end;
        ['eslint/confirmESLintExecution'] = function(_, _, result, client_id)
          if not result then return end
          print('asking for eslint execution')
          return 4 -- approved
        end;
      }
    };
  }
end
EOF
endfunction

command! EslintFixAll lua require'entropitor.lsp.commands'.eslint_fix_all()
nmap <leader>lF <cmd>lua require'entropitor.lsp.commands'.eslint_fix_all()<CR>

" ----------------
" ---   Yaml   ---
" ----------------
autocmd FileType yaml setlocal foldmethod=indent
Plug 'ingydotnet/yaml-vim', {'for': ['yaml']}
let g:ale_fixers['yaml'] = ['prettier']

" ================================
" ===   LSP Config   ===
" ================================
function! SetupLspServers()
call SetupLspEslint()
call SetupLspHaskell()

lua << EOF
local on_attach = function(client, _bufnr)
  require'completion'.on_attach()
  vim.cmd('highlight LspDiagnosticsUnderlineError guisp=DarkRed gui=underline')
  vim.cmd('highlight LspDiagnosticsSignError guibg=DarkRed')

  vim.cmd('highlight LspDiagnosticsUnderlineWarning guisp=LightYellow gui=underline')
  vim.cmd('highlight LspDiagnosticsSignWarning guibg=LightYellow')

  vim.cmd('highlight LspDiagnosticsUnderlineInformation guisp=LightBlue gui=underline')
  vim.cmd('highlight LspDiagnosticsSignInformation guibg=LightBlue')

  vim.cmd('highlight LspDiagnosticsUnderlineHint guisp=LightGrey gui=underline')
  vim.cmd('highlight LspDiagnosticsSignHint guibg=LightGrey')

  -- Set autocommands conditional on server_capabilities
  if client.resolved_capabilities.document_highlight then
    vim.api.nvim_exec([[
      hi LspReferenceRead gui=underline guisp=White
      hi LspReferenceText gui=underline guisp=White
      hi LspReferenceWrite gui=underline guisp=White
      augroup lsp_document_highlight
        autocmd! * <buffer>
        autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
        autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
    ]], false)
  end
end
local on_init = function (client)
  client.config.flags = {}
  if client.config.flags then
    client.config.flags.allow_incremental_sync = true
  end
end

require'jot-lsp'.setup()
lspconfig = require'lspconfig'
lsputil = require'lspconfig/util'

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true;

local servers = {
  "eslint",
  "clangd",
  "bashls",
  "dockerls",
  -- "flow",
  "gopls",
  -- "hie",
  "haskell",
  "jot",
  "ocamlls",
  "ocamllsp",
  "pyls",
  -- "rls",
  "rust_analyzer",
  "solargraph",
  "terraformls",
  "vimls",
}
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    capabilities = capabilities,
    on_attach = on_attach,
    on_init = on_init,
  }
end

lspconfig.tsserver.setup{
  capabilities = capabilities,
  on_attach = on_attach,
  on_init = on_init,
  -- root_dir = function(fname)
  --   return lspconfig.util.find_git_ancestor(fname) -- or lspconfig.util.root_pattern("package.json", "tsconfig.json", ".git")
  -- end;
}

lspconfig.fsautocomplete.setup{
  cmd = {"dotnet", vim.env.HOME .. "/.vim/bundle/Ionide-vim/fsac/fsautocomplete.dll", "--background-service-enabled"},
  capabilities = capabilities,
  on_attach = on_attach,
  on_init = on_init,
}
lspconfig.yamlls.setup{
  capabilities = capabilities,
  on_attach = on_attach,
  on_init = on_init,
  settings = {
    yaml = {
      schemaStore = {
        enable = true
      }
      -- schemas = {
      --  kubernetes = "*"
      --}
    }
  }
}
lspconfig.jsonls.setup{
  on_attach = on_attach,
  on_init = on_init,
  filetypes = {'json', 'jsonc'},
  capabilities = capabilities,
  settings = {
    json = {
      schemas = {
        {
          description = 'TypeScript compiler configuration file',
          fileMatch = {'tsconfig.json', 'tsconfig.*.json'},
          url = 'http://json.schemastore.org/tsconfig'
        },
        {
          description = 'NPM package.json',
          fileMatch = {'package.json'},
          url = 'http://json.schemastore.org/package'
        },
        {
          description = 'Lerna config',
          fileMatch = {'lerna.json'},
          url = 'http://json.schemastore.org/lerna'
        },
        {
          description = 'Babel configuration',
          fileMatch = {'.babelrc.json', '.babelrc', 'babel.config.json'},
          url = 'http://json.schemastore.org/lerna'
        },
        {
          description = 'ESLint config',
          fileMatch = {'.eslintrc.json', '.eslintrc'},
          url = 'http://json.schemastore.org/eslintrc'
        },
        {
          description = 'Bucklescript config',
          fileMatch = {'bsconfig.json'},
          url = 'https://bucklescript.github.io/bucklescript/docson/build-schema.json'
        },
        {
          description = 'Prettier config',
          fileMatch = {'.prettierrc', '.prettierrc.json', 'prettier.config.json'},
          url = 'http://json.schemastore.org/prettierrc'
        },
        {
          description = "DataCamp ecs.json",
          fileMatch = {'ecs.json', 'ecs.*.json'},
          url = 'https://assets.ops.datacamp.com/ecs.schema.json#',
        }
      }
    }
  }
}

local system_name
if vim.fn.has("mac") == 1 then
  system_name = "macOS"
elseif vim.fn.has("unix") == 1 then
  system_name = "Linux"
elseif vim.fn.has('win32') == 1 then
  system_name = "Windows"
else
  print("Unsupported system for sumneko")
end
-- set the path to the sumneko installation
local sumneko_root_path = vim.fn.stdpath('cache')..'/lua-language-server'
local sumneko_binary = sumneko_root_path.."/bin/"..system_name.."/lua-language-server"
lspconfig.sumneko_lua.setup {
  on_attach = on_attach;
  on_init = on_init,
  capabilities = capabilities,
  cmd = {sumneko_binary, "-E", sumneko_root_path .. "/main.lua"};
  settings = {
    Lua = {
      runtime = {
        -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
        version = 'LuaJIT',
        -- Setup your lua path
        path = vim.split(package.path, ';'),
      },
      diagnostics = {
        enable = true,
        -- Get the language server to recognize the `vim` global
        globals = {'vim'},
      },
      workspace = {
        -- Make the server aware of Neovim runtime files
        library = {
          [vim.fn.expand('$VIMRUNTIME/lua')] = true,
          [vim.fn.expand('$VIMRUNTIME/lua/vim/lsp')] = true,
        },
      },
    },
  },
}
EOF
echom "Setup Lsp Servers"
endfunction

autocmd FileType * setlocal omnifunc=v:lua.vim.lsp.omnifunc

call plug#end()

" After plug#end()
call SetupLspServers()
call which_key#register('<Space>', "g:which_key_map")

lua <<EOF
require('entropitor.dap')
require('entropitor.lsp.commands')
require('entropitor.lsp.handlers')
require('entropitor.treesitter')
require('entropitor.telescope')
EOF
